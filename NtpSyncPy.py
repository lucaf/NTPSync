# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_NtpSyncPy', [dirname(__file__)])
        except ImportError:
            import _NtpSyncPy
            return _NtpSyncPy
        if fp is not None:
            try:
                _mod = imp.load_module('_NtpSyncPy', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _NtpSyncPy = swig_import_helper()
    del swig_import_helper
else:
    import _NtpSyncPy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


eNtpSyncError_no = _NtpSyncPy.eNtpSyncError_no
eNtpSyncError_send = _NtpSyncPy.eNtpSyncError_send
eNtpSyncError_receive = _NtpSyncPy.eNtpSyncError_receive
eNtpSyncError_version = _NtpSyncPy.eNtpSyncError_version
eNtpSyncError_kod = _NtpSyncPy.eNtpSyncError_kod
eNtpSyncError_unexpected = _NtpSyncPy.eNtpSyncError_unexpected
eNtpSyncError_accuracy_broken = _NtpSyncPy.eNtpSyncError_accuracy_broken

def ntp_sync_start(*args):
  return _NtpSyncPy.ntp_sync_start(*args)
ntp_sync_start = _NtpSyncPy.ntp_sync_start

def ntp_sync_stop():
  return _NtpSyncPy.ntp_sync_stop()
ntp_sync_stop = _NtpSyncPy.ntp_sync_stop

def ntp_sync_set_time(*args):
  return _NtpSyncPy.ntp_sync_set_time(*args)
ntp_sync_set_time = _NtpSyncPy.ntp_sync_set_time

def ntp_sync_get_time():
  return _NtpSyncPy.ntp_sync_get_time()
ntp_sync_get_time = _NtpSyncPy.ntp_sync_get_time

def ntp_sync_start_time():
  return _NtpSyncPy.ntp_sync_start_time()
ntp_sync_start_time = _NtpSyncPy.ntp_sync_start_time

def ntp_sync_error():
  return _NtpSyncPy.ntp_sync_error()
ntp_sync_error = _NtpSyncPy.ntp_sync_error

def ntp_sync_on_error(*args):
  return _NtpSyncPy.ntp_sync_on_error(*args)
ntp_sync_on_error = _NtpSyncPy.ntp_sync_on_error

def ntp_sync_monotonic_time():
  return _NtpSyncPy.ntp_sync_monotonic_time()
ntp_sync_monotonic_time = _NtpSyncPy.ntp_sync_monotonic_time
# This file is compatible with both classic and new-style classes.


